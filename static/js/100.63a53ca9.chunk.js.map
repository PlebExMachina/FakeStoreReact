{"version":3,"file":"static/js/100.63a53ca9.chunk.js","mappings":"2LACA,EAAyB,4BAAzB,EAA4D,0BAA5D,EAA4F,yB,SCuB5F,MAdA,YAAgE,IAA1CA,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,cAC/BC,EADuD,EAATC,SACxB,EAI1B,OAFFF,EAAgBA,GAAkB,WAAQ,GAGhC,UAACG,EAAA,EAAD,CAAMC,UAAS,UAAKC,EAAL,YAAsBA,EAAtB,gEAAyFJ,EAAYI,EAAa,IAAML,cAAeA,EAAtJ,WACI,SAACG,EAAA,MAAD,CAAUG,QAAQ,MAAMC,IAAKR,KAC7B,SAACI,EAAA,OAAD,CAAWC,UAAU,yCAArB,SACGN,MAIlB,ECtBD,EAAyB,4BAAzB,EAA4D,0BCe5D,MAVA,YAAmD,IAA7BU,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YAChC,OACI,iBAAKN,UAAS,UAAKC,EAAL,YAAsBA,GAApC,UACKG,IAAS,SAACL,EAAA,QAAD,UAAaK,IACtBC,IAAS,UAACN,EAAA,OAAD,eAAaM,EAAME,QAAQ,MACpCD,IAAe,SAACP,EAAA,OAAD,UAAYO,MAGvC,ECbD,GAAgB,QAAU,6BAA6B,KAAO,2BC4B9D,MAfA,SAAqBE,GACjB,IAAMC,GAAWC,EAAAA,EAAAA,MAKXC,EAAmBH,EAAMZ,eAJb,WACda,EAAS,KAAD,OAAMD,EAAMI,IACvB,EAID,OACI,UAAC,EAAD,CAAajB,MAAOa,EAAMb,MAAOC,cAAee,EAAkBb,OAAQU,EAAMV,OAAQE,UAAS,UAAKC,EAAAA,OAAL,YAAsBA,EAAAA,MAAvH,WACI,SAAC,GAAD,UAAiBO,IAChBA,EAAMd,WAGlB,C,0KC3BD,EAAyB,yBAAzB,EAAyD,uBAAzD,EAA2F,2BAA3F,EAA6I,uC,SC+H7I,MArGA,WACI,OAAwBmB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAAwBR,EAAAA,EAAAA,UAAS,IAAjC,eAAOS,EAAP,KAAaC,EAAb,KAGA,GAA8CV,EAAAA,EAAAA,UAAS,CAAC,SAAxD,eAAOW,EAAP,KAAwBC,EAAxB,KAGMC,GAAaC,EAAAA,EAAAA,QAAO,MAGpBC,GAAqBC,EAAAA,EAAAA,cAAa,WACxC,IAAMC,EAAOV,EAAQW,QAAO,SAAAC,GAAE,OAAIA,EAAG5B,MAAM6B,cAAcC,SAASpB,EAAKmB,gBAAkBD,EAAG1B,YAAY2B,cAAcC,SAASpB,EAAKmB,cAAtG,IAC9B,OAAOf,GACH,IAAK,GACLK,EAAQO,GACR,MACA,IAAK,KACLP,EAAQO,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,MAAQgC,EAAEhC,KAAtB,KAClB,MACA,IAAK,KACLkB,EAAQO,EAAKK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEhC,MAAQ+B,EAAE/B,KAAtB,KAClB,MACA,QACAiC,QAAQC,IAAI,gCAEf,GAAE,CAACnB,EAASF,EAAQJ,IAGf0B,GAAgBX,EAAAA,EAAAA,cAAY,YAClC,WACI,OAAOb,GACP,IAAK,GAEL,IAAK,OACD,OAAOyB,EAAAA,EAAAA,MACX,QACI,OAAOC,EAAAA,EAAAA,IAAsB1B,GAPrC,KASK2B,MAAK,SAAAC,GACNvB,EAAWuB,EACd,GACA,GAAE,CAAC5B,IAQE6B,GAAYlB,EAAAA,EAAAA,UACVmB,GAAWC,EAAAA,EAAAA,GAAaF,GAAxBC,OAeR,OAZAE,EAAAA,EAAAA,YAAU,WAAQR,GAAiB,GAAE,CAACA,EAAexB,KAGrDgC,EAAAA,EAAAA,YAAU,WAAQpB,GAAsB,GAAE,CAACA,EAAoBd,EAAMI,KAGrE8B,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,MAAgBN,MAAK,SAACC,GAClBnB,EAAmB,CAAC,QAAF,eAAYmB,IACjC,GACJ,GAAE,KAGC,iBAAK5C,UAAS,UAAKC,EAAL,YAAsBA,GAApC,WACA,iBAAKD,UAAU,mDAAf,WACI,mBAAQA,UAAU,cAAlB,UAAgC,wCAChC,UAACkD,EAAA,EAAD,CAAMlD,UAAU,SAASmD,SAAU,WAxBvCpC,EAAQW,EAAW0B,QAAQC,MAwBmC,EAA1D,WACI,SAACH,EAAA,UAAD,CAAcI,KAAK,OAAOC,IAAK7B,EAAY8B,YAAY,SACvD,SAACC,EAAA,EAAD,CAAQvD,QAAQ,UAAUoD,KAAK,SAA/B,wBAEJ,UAACI,EAAA,EAAD,YACI,SAACA,EAAA,SAAD,CAAiBxD,QAAQ,UAAUU,GAAG,iBAAtC,sBACA,UAAC8C,EAAA,OAAD,YACI,SAACA,EAAA,OAAD,CAAeC,QAAS,WAAMxC,EAAU,GAAM,EAA9C,sBACA,SAACuC,EAAA,OAAD,CAAeC,QAAS,WAAMxC,EAAU,KAAQ,EAAhD,8BACA,SAACuC,EAAA,OAAD,CAAeC,QAAS,WAAMxC,EAAU,KAAQ,EAAhD,mCAGR,UAACuC,EAAA,EAAD,YACI,SAACA,EAAA,SAAD,CAAiBxD,QAAQ,UAAUU,GAAG,iBAAtC,uBACA,UAAC8C,EAAA,OAAD,WACKlC,EAAgBoC,KAAI,SAAC5B,EAAI6B,GAAL,OAAe,SAACH,EAAA,OAAD,CAA2BC,QAAS,WAAK1C,EAAYe,EAAI,EAAzD,SAA4DA,GAAxC6B,EAAnC,IADzB,yBAKR,gBAAK7D,UAAS,oBAAeC,EAAf,YAA8CA,GAA5D,UACI,gCAAKD,UAAS,mBAAyB8C,GAAvC,IAA+CS,IAAKV,EAApD,SACKvB,GAAQA,EAAKsC,KAAI,SAAA5B,GAAE,OAAI,SAAC8B,EAAA,GAAD,kBAA6B9B,GAA7B,IAAiC1B,YAAa,OAA5B0B,EAAGpB,GAAzB,WAMnC,C,+HCzGM,IAAM6B,EAAc,kBAAOsB,MAAM,qCAAqCpB,MAAK,SAAAqB,GAAG,OAAIA,EAAIC,MAAR,GAA1D,EAadC,EAAiB,SAACtD,GAAD,OAAQmD,MAAM,qCAAD,OAAsCnD,IAAM+B,MAAK,SAAAqB,GAAG,OAAIA,EAAIC,MAAR,GAAjE,EAMjBhB,EAAgB,kBAAMc,MAAM,gDAAgDpB,MAAK,SAAAqB,GAAG,OAAIA,EAAIC,MAAR,GAApE,EAgBhBvB,EAAwB,SAAC1B,GAAD,OAAc+C,MAAM,8CAAD,OAA+C/C,IAAY2B,MAAK,SAAAqB,GAAG,OAAIA,EAAIC,MAAR,GAAtF,C","sources":["webpack://fake-store-react/./src/components/wrappers/CardWrapper.module.css?e0be","components/wrappers/CardWrapper.js","components/ProductBody.module.css","components/ProductBody.js","webpack://fake-store-react/./src/components/ProductCard.module.css?5046","components/ProductCard.js","webpack://fake-store-react/./src/pages/Products.module.css?1d52","pages/Products.js","utils/FakeStoreAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"module\":\"CardWrapper_module__z3uWm\",\"body\":\"CardWrapper_body__11L9G\",\"alt\":\"CardWrapper_alt__w4Yjm\"};","/*\r\n  Wrapper for a Bootstrap Card with provided image properties and children elements for the body.\r\n*/\r\n\r\n// Bootstrap\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n// CSS\r\nimport styles from './CardWrapper.module.css';\r\n\r\nfunction CardWrapper({children, image, onDoubleClick, config}) {\r\n  const useConfig = config || false;\r\n  // Injected double click event\r\n  onDoubleClick = onDoubleClick || (() => {});\r\n\r\n    return (\r\n            <Card className={`${styles.module} ${styles.body} text-center col-xs-4 d-flex justify-content-between ${useConfig ? styles.alt : ''}`} onDoubleClick={onDoubleClick}>\r\n                <Card.Img variant=\"top\" src={image} />\r\n                <Card.Body className=\"d-flex flex-column justify-content-end\">\r\n                  {children}\r\n                </Card.Body>\r\n            </Card>\r\n    );\r\n}\r\nexport default CardWrapper;","// extracted by mini-css-extract-plugin\nexport default {\"module\":\"ProductBody_module__a40Wa\",\"body\":\"ProductBody_body__aAjDe\"};","// Bootstrap\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n// CSS\r\nimport styles from './ProductBody.module.css';\r\n\r\nfunction ProductBody({title, price, description}) {\r\n    return (\r\n        <div className={`${styles.module} ${styles.body}`}>\r\n            {title && <Card.Title>{title}</Card.Title>}\r\n            {price && <Card.Text>${price.toFixed(2)}</Card.Text>}\r\n            {description && <Card.Text>{description}</Card.Text>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductBody;","// extracted by mini-css-extract-plugin\nexport default {\"product\":\"ProductCard_product__-DuIO\",\"card\":\"ProductCard_card__xDifG\"};","/*\r\n    Specialization of the card that contains product information.\r\n*/\r\n\r\n// React\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Sub Components\r\nimport CardWrapper from './wrappers/CardWrapper';\r\nimport ProductBody from './ProductBody';\r\n\r\n// CSS\r\nimport styles from './ProductCard.module.css';\r\n\r\nfunction ProductCard(props) {\r\n    const navigate = useNavigate();\r\n    const toDetails = () => {\r\n        navigate(`./${props.id}`);\r\n    };\r\n\r\n    const localDoubleClick = props.onDoubleClick || toDetails;\r\n\r\n    return (\r\n        <CardWrapper image={props.image} onDoubleClick={localDoubleClick} config={props.config} className={`${styles.module} ${styles.body}`}>\r\n            <ProductBody {...props}/>\r\n            {props.children}\r\n        </CardWrapper>\r\n    );\r\n}\r\nexport default ProductCard;","// extracted by mini-css-extract-plugin\nexport default {\"module\":\"Products_module__KWmt7\",\"body\":\"Products_body__9khjo\",\"products\":\"Products_products__3msWA\",\"horizontalScrollable\":\"Products_horizontalScrollable__ZVmK-\",\"testimonial-group\":\"Products_testimonial-group__Knno6\"};","/*\r\n    The products page contains a list of fetched products which can be filtered / sorted in several ways.\r\n*/\r\n\r\n// React\r\nimport { useState, useEffect, useCallback, useRef } from 'react'\r\n\r\n// Sub Components\r\nimport ProductCard from '../components/ProductCard'\r\n\r\n// Utils\r\nimport { useDraggable } from \"react-use-draggable-scroll\";\r\nimport { getProducts, getProductsByCategory, getCategories } from '../utils/FakeStoreAPI'\r\n\r\n// Bootstrap\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// CSS\r\nimport styles from './Products.module.css';\r\n\r\n/*\r\n    There's not much of a point breaking this one down into sub-components.\r\n    The Bootstrap components will not get much simpler and the entire page is UI to begin with so the page would just have a single component.\r\n*/\r\n\r\nfunction Products() {\r\n    const [term, setTerm] = useState(\"\");           // Term must be included in either title or description.\r\n    const [category, setCategory] = useState(\"\");   // Category to filter the query by. Changing this will trigger a re-fetch.\r\n    const [sortBy, setSortBy] = useState(\"\");       // \"\" -> None, LT -> Lowest to Highest, GT -> Highest to Lowest. Changing this will change results without fetching.\r\n    const [results, setResults] = useState([]);      // Literal results of the fetch.\r\n    const [view, setView] = useState([]);           // Results after filtering / sorting.\r\n\r\n    // Categories available for the page.\r\n    const [categoryOptions, setCategoryOptions] = useState([\"None\"]);\r\n    \r\n    // Bind directly to the search bar value.\r\n    const formSearch = useRef(null);\r\n\r\n    // Update the view (filter / sort)\r\n    const UpdateProductsView = useCallback (() => {\r\n    const Temp = results.filter(el => el.title.toLowerCase().includes(term.toLowerCase()) || el.description.toLowerCase().includes(term.toLowerCase()));\r\n    switch(sortBy){\r\n        case \"\": \r\n        setView(Temp);\r\n        break;\r\n        case \"LT\": \r\n        setView(Temp.sort((a, b) => a.price - b.price));\r\n        break;\r\n        case \"GT\": \r\n        setView(Temp.sort((a, b) => b.price - a.price));\r\n        break;\r\n        default:\r\n        console.log(\"Unexpected Sorting Parameter\")\r\n    };\r\n    }, [results, sortBy, term]);\r\n\r\n    // Get products then update results.\r\n    const FetchProducts = useCallback(() => {\r\n    (() => {\r\n        switch(category){\r\n        case \"\":\r\n            return getProducts();\r\n        case \"None\":\r\n            return getProducts();\r\n        default:\r\n            return getProductsByCategory(category);\r\n        }\r\n    })().then(obj => {\r\n        setResults(obj);\r\n    });\r\n    }, [category]);\r\n    \r\n    // Update search term.\r\n    const handleSubmit = () => {\r\n        setTerm(formSearch.current.value);\r\n    };\r\n\r\n    // Draggable\r\n    const dragPoint = useRef(); \r\n    const { events } = useDraggable(dragPoint);\r\n\r\n    // When category changes re-fetch.\r\n    useEffect(() => { FetchProducts() }, [FetchProducts, category]);\r\n\r\n    // When other query parameters then re-filter / sort data.\r\n    useEffect(() => { UpdateProductsView() }, [UpdateProductsView, term, sortBy]);\r\n\r\n    // On initialization only fetch categories from API\r\n    useEffect(() => {\r\n        getCategories().then((obj) => {\r\n            setCategoryOptions([\"None\",...obj]);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`${styles.module} ${styles.body}`}>\r\n        <div className=\"container d-flex justify-content-between p-3 m-3\">\r\n            <header className=\"text-center\"><h1>Products</h1></header>\r\n            <Form className=\"d-flex\" onSubmit={()=>{ handleSubmit(); }}>\r\n                <Form.Control type=\"text\" ref={formSearch} placeholder=\"...\" />\r\n                <Button variant=\"primary\" type=\"submit\">Search</Button>\r\n            </Form>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Sort By</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={()=>{ setSortBy(\"\"); }}>Nothing</Dropdown.Item>\r\n                    <Dropdown.Item onClick={()=>{ setSortBy(\"LT\"); }}>Least Expensive</Dropdown.Item>\r\n                    <Dropdown.Item onClick={()=>{ setSortBy(\"GT\"); }}>Most Expensive</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">Category</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    {categoryOptions.map((el, index) => <Dropdown.Item key={index} onClick={()=>{setCategory(el)}}>{el}\r\n                    </Dropdown.Item>)}            </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n        <div className={`container ${styles.horizontalScrollable} ${styles.products}`}>\r\n            <div className={`row text-center`} {...events} ref={dragPoint}>\r\n                {view && view.map(el => <ProductCard key={el.id} {...el} description={null}/>)}\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Products;","/* \r\n    Implements the FakeStoreAPI\r\n\r\n    This is naive and assumes that nothing will go wrong with the fetch. \r\n\r\n    https://fakestoreapi.com/ \r\n*/\r\n\r\n// Get all products\r\n/*\r\n    [\r\n        {\r\n            id:1,\r\n            title:'...',\r\n            price:'...',\r\n            category:'...',\r\n            description:'...',\r\n            image:'...'\r\n        },\r\n        ...\r\n    ]\r\n*/\r\nexport const getProducts = () =>  fetch('https://fakestoreapi.com/products').then(res => res.json());\r\n\r\n// Get a single product\r\n/*\r\n    {\r\n        id:1,\r\n        title:'...',\r\n        price:'...',\r\n        category:'...',\r\n        description:'...',\r\n        image:'...'\r\n    },\r\n*/\r\nexport const getProductByID = (id) => fetch(`https://fakestoreapi.com/products/${id}`).then(res => res.json());\r\n\r\n// Retrieves available categories.\r\n/*\r\n    [\"electronics\",\"jewelery\",\"men's clothing\",\"women's clothing\"]\r\n*/\r\nexport const getCategories = () => fetch(`https://fakestoreapi.com/products/categories`).then(res => res.json());\r\n\r\n// Get products in a specific category\r\n/*\r\n    [\r\n        {\r\n            id:1,\r\n            title:'...',\r\n            price:'...',\r\n            category:'<category>',\r\n            description:'...',\r\n            image:'...'\r\n        },\r\n        ...\r\n    ]\r\n*/\r\nexport const getProductsByCategory = (category) => fetch(`https://fakestoreapi.com/products/category/${category}`).then(res => res.json());\r\n\r\n// Filters a list of data by a search term. Checks both title and description.\r\nexport const filterByTerm = (arr, term) => arr.filter((el) => el.title.includes(term) || el.description.includes(term));"],"names":["children","image","onDoubleClick","useConfig","config","Card","className","styles","variant","src","title","price","description","toFixed","props","navigate","useNavigate","localDoubleClick","id","useState","term","setTerm","category","setCategory","sortBy","setSortBy","results","setResults","view","setView","categoryOptions","setCategoryOptions","formSearch","useRef","UpdateProductsView","useCallback","Temp","filter","el","toLowerCase","includes","sort","a","b","console","log","FetchProducts","getProducts","getProductsByCategory","then","obj","dragPoint","events","useDraggable","useEffect","getCategories","Form","onSubmit","current","value","type","ref","placeholder","Button","Dropdown","onClick","map","index","ProductCard","fetch","res","json","getProductByID"],"sourceRoot":""}